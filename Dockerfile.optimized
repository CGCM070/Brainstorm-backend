# Optimized Multi-stage Dockerfile for Production Deployment
# This version uses Spring Boot Layered JARs for fast startup and smaller images

# ---------- Build Stage ----------
FROM maven:3.9.8-eclipse-temurin-21-alpine AS build

WORKDIR /app

# Copy dependency files first for better caching
COPY pom.xml .
COPY mvnw .
COPY .mvn .mvn

# Make mvnw executable
RUN chmod +x mvnw

# Download dependencies
RUN ./mvnw dependency:go-offline -B

# Copy source code
COPY src src

# Build application with AOT processing
RUN ./mvnw clean package -DskipTests spring-boot:process-aot

# Extract layers for optimized Docker image
RUN java -Djarmode=layertools -jar target/Brainstorm-*.jar extract

# ---------- Runtime Stage (Optimized JVM) ----------
FROM eclipse-temurin:21-jre-alpine

# Add non-root user for security
RUN addgroup -g 1001 -S spring && adduser -u 1001 -S spring -G spring

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Set working directory
WORKDIR /app

# Copy extracted layers from build stage (in optimal order for caching)
COPY --from=build --chown=spring:spring /app/dependencies/ ./
COPY --from=build --chown=spring:spring /app/spring-boot-loader/ ./
COPY --from=build --chown=spring:spring /app/snapshot-dependencies/ ./
COPY --from=build --chown=spring:spring /app/application/ ./

# Switch to non-root user
USER spring:spring

# Expose port
EXPOSE 8080

# Environment variables optimized for Render free tier
ENV SPRING_PROFILES_ACTIVE=prod
ENV JAVA_OPTS="-Xmx400m -Xms256m -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+UseCompressedOops"

# Use dumb-init and optimized JVM flags
ENTRYPOINT ["dumb-init", "java", "-cp", "BOOT-INF/classes:BOOT-INF/lib/*", "org.brainstorm.BrainstormApplication"]